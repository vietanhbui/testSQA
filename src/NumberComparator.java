/*
 * This code was generated by ojc.
 */
import hust.sqa.btl.instrument.*;


public class NumberComparator
{

    public NumberComparator()
    {
        super();
        trace.add( new java.lang.Integer( 9 ) );
    }

    private java.lang.String checkPrimeNumber( int number )
    {
        trace.add( new java.lang.Integer( 10 ) );
        if (number < 2) {
            trace.add( new java.lang.Integer( 11 ) );
            return "Number must be greater than 1";
        } else {
            trace.add( new java.lang.Integer( 12 ) );
        }
        boolean isPrime = true;
        for (int i = 2; i <= number / 2; i++) {
            trace.add( new java.lang.Integer( 13 ) );
            if (number % i == 0) {
                trace.add( new java.lang.Integer( 14 ) );
                isPrime = false;
                break;
            } else {
                trace.add( new java.lang.Integer( 15 ) );
            }
        }
        if (isPrime) {
            trace.add( new java.lang.Integer( 16 ) );
            return "Is Prime Number";
        } else {
            trace.add( new java.lang.Integer( 17 ) );
            return "Is Not Prime Number";
        }
    }

    private java.lang.String checkPassword( java.lang.String password )
    {
        trace.add( new java.lang.Integer( 18 ) );
        if (password.length() < 8) {
            trace.add( new java.lang.Integer( 19 ) );
            return "Password length is less than 8";
        } else {
            trace.add( new java.lang.Integer( 20 ) );
        }
        char c;
        int count = 0;
        for (int i = 0; i < password.length(); i++) {
            trace.add( new java.lang.Integer( 21 ) );
            c = password.charAt( i );
            if (!Character.isLetterOrDigit( c )) {
                trace.add( new java.lang.Integer( 22 ) );
                return "Password must contain only letters or digits";
            } else {
                trace.add( new java.lang.Integer( 23 ) );
            }
            if (Character.isDigit( c )) {
                trace.add( new java.lang.Integer( 24 ) );
                count++;
            } else {
                trace.add( new java.lang.Integer( 25 ) );
            }
        }
        if (count < 2) {
            trace.add( new java.lang.Integer( 26 ) );
            return "Invalid password";
        } else {
            trace.add( new java.lang.Integer( 27 ) );
        }
        return "Valid password";
    }

    
    static java.util.Set trace = new java.util.HashSet();

    
    public static void newTrace()
    {
        trace = new java.util.HashSet();
    }

    
    public static java.util.Set getTrace()
    {
        return trace;
    }

}
